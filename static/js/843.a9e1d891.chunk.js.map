{"version":3,"file":"static/js/843.a9e1d891.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form } from 'formik';\nimport { Button } from '@mui/material';\n\nexport const FormSection = styled.section`\n  max-width: 600px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const FormBox = styled(Form)`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-items: center;\n  margin-bottom: 40px;\n`;\n\nexport const FormLabel = styled.label`\n  width: 100%;\n  margin-bottom: 10px;\n  margin-top: 10px;\n`;\n\nexport const FormInput = styled.input`\n  width: 100%;\n  height: 30px;\n\n  ${\n    '' /* &:not(:last-child) {\n    margin-right: 20px;\n  } */\n  }\n`;\n\nexport const FormButton = styled(Button)`\n  ${'' /* display: block; */}\n  margin-top: 20px;\n  width: 160px;\n  height: 40px;\n  font-size: 12px;\n  transition: scale 250ms linear, background-color 250ms linear,\n    color 250ms linear;\n\n  ${\n    '' /* :hover,\n  :focus {\n    background-color: #63868a;\n    color: #e1e4e9;\n    scale: 1.1;\n  } */\n  }\n`;\n","export const selectContacts = state => state.contacts.items;\nexport const selectLoadingStatus = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilterValue = state => state.filter;\n\nexport const selectContactsByName = state => {\n  const contacts = selectContacts(state);\n  const filter = selectFilterValue(state);\n  if (!filter) {\n    return [...contacts].sort((firstContact, secondContact) =>\n      firstContact.name.localeCompare(secondContact.name)\n    );\n  }\n  return [...contacts]\n    .sort((firstContact, secondContact) =>\n      firstContact.name.localeCompare(secondContact.name)\n    )\n    .filter(contact =>\n      contact.name.toUpperCase().includes(filter.toUpperCase())\n    );\n};\n","import React from 'react';\nimport { Formik, Field } from 'formik';\nimport {\n  FormSection,\n  FormBox,\n  FormLabel,\n  FormInput,\n  FormButton,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\nconst ContactForm = () => {\n  const initualValues = {\n    name: '',\n    number: '',\n  };\n\n  const contacts = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n\n  const handleOnSubmit = (values, { resetForm }) => {\n    console.log(values);\n    contacts.find(\n      contact => values.name.toLowerCase() === contact.name.toLowerCase()\n    )\n      ? alert(`${values.name} is already in contacts.`)\n      : dispatch(addContact(values));\n    resetForm();\n  };\n\n  return (\n    <FormSection>\n      <h2>Add contact:</h2>\n      <Formik initialValues={initualValues} onSubmit={handleOnSubmit}>\n        <FormBox>\n          <FormLabel>Name</FormLabel>\n          <Field\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            as={FormInput}\n            required\n          />\n          <FormLabel>Number</FormLabel>\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            as={FormInput}\n            required\n          />\n          <FormButton variant=\"contained\" type=\"submit\">\n            Add contact\n          </FormButton>\n        </FormBox>\n      </Formik>\n    </FormSection>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const FilterTitle = styled.h3`\n  margin-bottom: 10px;\n`;\n\nexport const FilterInput = styled.input`\n  width: 200px;\n  height: 20px;\n`;\n","import { FilterTitle, FilterInput } from './Filter.styled';\nimport { setFilterValue } from '../../redux/contacts/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilterValue } from '../../redux/contacts/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilterValue);\n\n  const filterInputHandler = event => {\n    const inputValue = event.target.value;\n    dispatch(setFilterValue(inputValue));\n  };\n\n  return (\n    <div>\n      <FilterTitle>Find contacts by name</FilterTitle>\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={filterInputHandler}\n        title=\"Search field\"\n        required\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\nimport { Button } from '@mui/material';\n\nexport const ContactSection = styled.section`\n  margin-top: 30px;\n`;\n\nexport const ContactListBox = styled.ul`\n  margin-top: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 20px;\n`;\n\nexport const ContactListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  flex-basis: calc((100% - 60px) / 4);\n`;\n\nexport const ContactListText = styled.p`\n  margin-bottom: 10px;\n`;\n\nexport const ContactListBtn = styled(Button)`\n  width: 160px;\n  height: 40px;\n  font-size: 12px;\n  transition: scale 250ms linear, background-color 250ms linear,\n    color 250ms linear;\n`;\n","import {\n  ContactSection,\n  ContactListBox,\n  ContactListItem,\n  ContactListBtn,\n  ContactListText,\n} from './ContactList.styled';\nimport { useEffect } from 'react';\nimport {\n  selectContactsByName,\n  selectLoadingStatus,\n} from '../../redux/contacts/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts, deleteContact } from '../../redux/contacts/operations';\nimport Loader from 'components/Loader';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsByName);\n  const isLoading = useSelector(selectLoadingStatus);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ContactSection>\n      <h2>Contacts</h2>\n      <ContactListBox>\n        {isLoading && <Loader />}\n        {contacts.map(({ id, name, phone }) => (\n          <ContactListItem key={id}>\n            <ContactListText>{name}</ContactListText>\n            <ContactListText>{phone}</ContactListText>\n            <ContactListBtn\n              variant=\"contained\"\n              onClick={() => {\n                dispatch(deleteContact(id));\n              }}\n            >\n              Delete contact\n            </ContactListBtn>\n          </ContactListItem>\n        ))}\n      </ContactListBox>\n    </ContactSection>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport { Container } from '../components/App/Container.styled';\nimport ContactForm from '../components/ContactForm';\nimport Filter from '../components/Filter';\nimport ContactList from '../components/ContactList';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../redux/contacts/operations';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["FormSection","styled","FormBox","Form","FormLabel","FormInput","FormButton","Button","selectContacts","state","contacts","items","selectLoadingStatus","isLoading","selectFilterValue","filter","selectContactsByName","sort","firstContact","secondContact","name","localeCompare","contact","toUpperCase","includes","useSelector","dispatch","useDispatch","initialValues","number","onSubmit","values","resetForm","console","log","find","toLowerCase","alert","addContact","type","pattern","title","as","required","variant","FilterTitle","FilterInput","value","onChange","event","inputValue","target","setFilterValue","ContactSection","ContactListBox","ContactListItem","ContactListText","ContactListBtn","useEffect","fetchContacts","Loader","map","id","phone","onClick","deleteContact"],"sourceRoot":""}