{"version":3,"file":"static/js/843.bfb71ae6.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","redux/contacts/selectors.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form } from 'formik';\nimport { Button } from '@mui/material';\n\nexport const FormSection = styled.section`\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const FormBox = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n`;\n\nexport const FormLabel = styled.label`\n  margin-bottom: 10px;\n  margin-top: 10px;\n  width: 100%;\n\n  @media screen and (min-width: 480px) {\n    width: 450px;\n  }\n`;\n\nexport const FormInput = styled.input`\n  height: 30px;\n  width: 100%;\n\n  &:focus,\n  &:hover,\n  &:active {\n    border-color: rgb(158, 63, 176);\n  }\n\n  @media screen and (min-width: 480px) {\n    width: 450px;\n  } ;\n`;\n\nexport const FormButton = styled(Button)`\n  margin-top: 20px;\n  width: 160px;\n  height: 40px;\n  font-size: 12px;\n  transition: scale 250ms linear, background-color 250ms linear,\n    color 250ms linear;\n\n  &:hover {\n    background-color: rgb(158, 63, 176);\n    scale: 1.1;\n  }\n`;\n","export const selectContacts = state => state.contacts.items;\nexport const selectLoadingStatus = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilterValue = state => state.filter;\n\nexport const selectContactsByName = state => {\n  const contacts = selectContacts(state);\n  const filter = selectFilterValue(state);\n  if (!filter) {\n    return [...contacts].sort((firstContact, secondContact) =>\n      firstContact.name.localeCompare(secondContact.name)\n    );\n  }\n\n  return [...contacts]\n    .sort((firstContact, secondContact) =>\n      firstContact.name.localeCompare(secondContact.name)\n    )\n    .filter(contact =>\n      contact.name.toUpperCase().includes(filter.toUpperCase())\n    );\n};\n","import React from 'react';\nimport { Formik, Field } from 'formik';\nimport {\n  FormSection,\n  FormBox,\n  FormLabel,\n  FormInput,\n  FormButton,\n} from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { Container } from '../App/Container.styled';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst ContactForm = () => {\n  const initualValues = {\n    name: '',\n    number: '',\n  };\n\n  const contacts = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n\n  const handleOnSubmit = (values, { resetForm }) => {\n    contacts.find(\n      contact => values.name.toLowerCase() === contact.name.toLowerCase()\n    )\n      ? Notify.failure(`${values.name} is already in contacts`)\n      : dispatch(addContact(values));\n    resetForm();\n  };\n\n  return (\n    <FormSection>\n      <Container>\n        <h2>Add contact:</h2>\n        <Formik initialValues={initualValues} onSubmit={handleOnSubmit}>\n          <FormBox>\n            <FormLabel>Name</FormLabel>\n            <Field\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              as={FormInput}\n              required\n            />\n            <FormLabel>Number</FormLabel>\n            <Field\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              as={FormInput}\n              required\n            />\n            <FormButton variant=\"contained\" type=\"submit\">\n              Add contact\n            </FormButton>\n          </FormBox>\n        </Formik>\n      </Container>\n    </FormSection>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const FilterTitle = styled.label`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  align-items: center;\n  font-size: 24px;\n  font-weight: 700;\n  flex-grow: 1;\n  width: 100%;\n`;\n\nexport const FilterInput = styled.input`\n  width: 100%;\n  height: 30px;\n  margin-top: 10px;\n\n  @media screen and (min-width: 480px) {\n    width: 450px;\n  }\n\n  &:focus,\n  &:hover,\n  &:active {\n    border-color: rgb(158, 63, 176);\n  }\n`;\n","import { FilterTitle, FilterInput } from './Filter.styled';\nimport { setFilterValue } from '../../redux/contacts/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectFilterValue,\n  selectContacts,\n} from '../../redux/contacts/selectors';\nimport { Container } from '../App/Container.styled';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilterValue);\n  const contacts = useSelector(selectContacts);\n\n  const filterInputHandler = event => {\n    const inputValue = event.target.value;\n    console.log(inputValue);\n    console.log(contacts);\n\n    const serchContact = contacts.filter(({ name }) =>\n      name.toUpperCase().includes(inputValue.toUpperCase())\n    );\n    console.log(serchContact);\n    if (serchContact.length === 0) {\n      Notify.failure('Нет такого контакта');\n    }\n    dispatch(setFilterValue(inputValue));\n  };\n\n  return (\n    <section>\n      <Container>\n        <FilterTitle>\n          Find contact by name:\n          <FilterInput\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={filterInputHandler}\n            title=\"Search field\"\n            required\n          />\n        </FilterTitle>\n      </Container>\n    </section>\n  );\n};\n\nexport default Filter;\n","import styled from '@emotion/styled';\nimport { Button } from '@mui/material';\n\nexport const ContactSection = styled.section`\n  padding-top: 20px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const ContactListBox = styled.ul`\n  margin-top: 20px;\n  display: flex;\n  align-items: center;\n  gap: 20px;\n\n  @media screen and (max-width: 767px) {\n    flex-direction: column;\n  }\n\n  @media screen and (min-width: 768px) {\n    flex-wrap: wrap;\n  }\n`;\n\nexport const ContactListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  flex-basis: 100%;\n\n  @media screen and (min-width: 768px) {\n    flex-basis: calc((100% - 60px) / 4);\n  }\n\n  @media screen and (min-width: 1200px) {\n    flex-basis: calc((100% - 100px) / 6);\n  }\n`;\n\nexport const ContactListText = styled.p`\n  margin-bottom: 10px;\n`;\n\nexport const ContactListBtn = styled(Button)`\n  width: 160px;\n  height: 40px;\n  font-size: 12px;\n  transition: scale 250ms linear, background-color 250ms linear,\n    color 250ms linear;\n\n  &:hover {\n    background-color: rgb(158, 63, 176);\n    scale: 1.1;\n  }\n`;\n","import {\n  ContactSection,\n  ContactListBox,\n  ContactListItem,\n  ContactListBtn,\n  ContactListText,\n} from './ContactList.styled';\nimport { useEffect } from 'react';\nimport {\n  selectContactsByName,\n  selectLoadingStatus,\n} from '../../redux/contacts/selectors';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts, deleteContact } from '../../redux/contacts/operations';\nimport Loader from 'components/Loader';\nimport { Container } from '../App/Container.styled';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsByName);\n  const isLoading = useSelector(selectLoadingStatus);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ContactSection>\n      <Container>\n        <h2>Contacts</h2>\n        <ContactListBox>\n          {isLoading && <Loader />}\n          {contacts.map(({ id, name, number }) => (\n            <ContactListItem key={id}>\n              <ContactListText>{name}</ContactListText>\n              <ContactListText>{number}</ContactListText>\n              <ContactListBtn\n                variant=\"contained\"\n                onClick={() => {\n                  dispatch(deleteContact(id));\n                }}\n              >\n                Delete contact\n              </ContactListBtn>\n            </ContactListItem>\n          ))}\n        </ContactListBox>\n      </Container>\n    </ContactSection>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport ContactForm from '../components/ContactForm';\nimport Filter from '../components/Filter';\nimport ContactList from '../components/ContactList';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../redux/contacts/operations';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["FormSection","styled","FormBox","Form","FormLabel","FormInput","FormButton","Button","selectContacts","state","contacts","items","selectLoadingStatus","isLoading","selectFilterValue","filter","selectContactsByName","sort","firstContact","secondContact","name","localeCompare","contact","toUpperCase","includes","useSelector","dispatch","useDispatch","initialValues","number","onSubmit","values","resetForm","find","toLowerCase","Notify","addContact","type","pattern","title","as","required","variant","FilterTitle","FilterInput","value","onChange","event","inputValue","target","console","log","serchContact","length","setFilterValue","ContactSection","ContactListBox","ContactListItem","ContactListText","ContactListBtn","useEffect","fetchContacts","Loader","map","id","onClick","deleteContact"],"sourceRoot":""}